
'use client';

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Loader2, PlayCircle, Terminal, FileJson } from "lucide-react";
import { useState } from "react";
import { useToast } from "@/hooks/use-toast";

export default function OfficialPredictionsPage() {
    const [isLoading, setIsLoading] = useState(false);
    const [logs, setLogs] = useState<string[]>([]);
    const [predictionResult, setPredictionResult] = useState<object | null>(null);
    const { toast } = useToast();

    const handleGeneratePredictions = async () => {
        setIsLoading(true);
        setLogs(['ðŸš€ Starting Football Predictions Generation...']);
        setPredictionResult(null);

        // In a real app, you would call your Firebase Function endpoint here.
        // For now, this is a simulation.
        await new Promise(resolve => setTimeout(resolve, 1500));
        setLogs(prev => [...prev, 'âœ… Fetched matches from API-Football']);

        await new Promise(resolve => setTimeout(resolve, 3000));
        setLogs(prev => [...prev, 'âœ… AI Analysis with Claude completed']);
        
        await new Promise(resolve => setTimeout(resolve, 500));
        setLogs(prev => [...prev, 'âœ… Predictions validated']);

        await new Promise(resolve => setTimeout(resolve, 1000));
        setLogs(prev => [...prev, 'âœ… Saved to Firestore']);

        await new Promise(resolve => setTimeout(resolve, 1000));
        setLogs(prev => [...prev, 'âœ… Published to website']);
        
        await new Promise(resolve => setTimeout(resolve, 500));
        setLogs(prev => [...prev, 'âœ… Sent success notification']);

        // Mock prediction result data
        const mockResult = {
            secure_trial: { coupon_1: [ { match: 'Man U vs Chelsea', prediction: '1' } ]},
            exclusive_vip: { 
                coupon_1: [ { match: 'Real Madrid vs Barca', prediction: 'X' } ], 
                coupon_2: [], 
                coupon_3: [] 
            },
            individual_vip: [ { match: 'Bayern vs Dortmund', prediction: 'Over 2.5' } ],
            free_coupon: { coupon_1: [ { match: 'PSG vs Monaco', prediction: '1' } ] },
            free_individual: [ { match: 'Liverpool vs Arsenal', prediction: 'BTTS' } ],
        };
        setPredictionResult(mockResult);


        toast({
            title: "Process Complete",
            description: "Official predictions have been generated and published successfully.",
        });

        setIsLoading(false);
    };

    return (
        <div className="space-y-6">
            <Card>
                <CardHeader>
                    <CardTitle>Official Predictions Generator</CardTitle>
                    <CardDescription>Manually trigger the daily football prediction generation process.</CardDescription>
                </CardHeader>
                <CardContent>
                    <p className="text-sm text-muted-foreground">
                        Clicking the button below will start the automated process of fetching matches, analyzing them with AI, and publishing the 50 official daily predictions to the website and database.
                    </p>
                </CardContent>
                <CardFooter>
                    <Button onClick={handleGeneratePredictions} disabled={isLoading}>
                        {isLoading ? (
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        ) : (
                            <PlayCircle className="mr-2 h-4 w-4" />
                        )}
                        {isLoading ? 'Generating...' : 'Generate Today\'s Predictions'}
                    </Button>
                </CardFooter>
            </Card>

            {(logs.length > 0) && (
                <Card>
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2"><Terminal /> Generation Logs</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <div className="bg-muted/50 p-4 rounded-lg h-64 overflow-y-auto">
                            <pre className="text-xs whitespace-pre-wrap">
                                {logs.join('\n')}
                            </pre>
                        </div>
                    </CardContent>
                </Card>
            )}

            {predictionResult && (
                 <Card>
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2"><FileJson /> Generated Predictions Result</CardTitle>
                        <CardDescription>
                            Here is a summary of the predictions generated by the AI agent.
                        </CardDescription>
                    </CardHeader>
                    <CardContent>
                        <div className="bg-muted/50 p-4 rounded-lg h-96 overflow-y-auto">
                            <pre className="text-xs whitespace-pre-wrap">
                                {JSON.stringify(predictionResult, null, 2)}
                            </pre>
                        </div>
                    </CardContent>
                </Card>
            )}
        </div>
    );
}
