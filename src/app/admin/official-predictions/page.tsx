
'use client';

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Loader2, PlayCircle, Terminal, FileJson, UploadCloud } from "lucide-react";
import { useState, useEffect } from "react";
import { useToast } from "@/hooks/use-toast";
import { generateOfficialPredictions } from "@/ai/flows/generate-official-predictions";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { useFirestore, useCollection } from "@/firebase";
import { doc, updateDoc, collection } from 'firebase/firestore';

type MatchPrediction = {
    match: string;
    home_team: string;
    away_team: string;
    league: string;
    time: string;
    prediction: string;
    odds: number;
    confidence: number;
};

type PredictionCategoryDoc = {
    id: string;
    predictions: MatchPrediction[];
    status: 'published' | 'unpublished';
    category: string;
    generated_at: string;
};

const PredictionTable = ({ matches }: { matches: MatchPrediction[] }) => {
    if (!matches || matches.length === 0) {
        return <p className="text-sm text-muted-foreground px-4 py-2">No predictions in this category.</p>;
    }
    return (
        <Table>
            <TableHeader>
                <TableRow>
                    <TableHead>Match</TableHead>
                    <TableHead>League</TableHead>
                    <TableHead>Prediction</TableHead>
                    <TableHead className="text-right">Odds</TableHead>
                    <TableHead className="text-right">Confidence</TableHead>
                </TableRow>
            </TableHeader>
            <TableBody>
                {matches.map((p, index) => (
                    <TableRow key={index}>
                        <TableCell className="font-medium">{p.match}</TableCell>
                        <TableCell>{p.league}</TableCell>
                        <TableCell><Badge variant="secondary">{p.prediction}</Badge></TableCell>
                        <TableCell className="text-right">{p.odds.toFixed(2)}</TableCell>
                        <TableCell className="text-right">{p.confidence}%</TableCell>
                    </TableRow>
                ))}
            </TableBody>
        </Table>
    );
};

const categoryTitles: Record<string, string> = {
    secure_trial: 'Secure Trial',
    free_coupon: 'Free Coupon',
    free_individual: 'Free Individual',
    exclusive_vip_1: 'Exclusive VIP Coupon 1',
    exclusive_vip_2: 'Exclusive VIP Coupon 2',
    exclusive_vip_3: 'Exclusive VIP Coupon 3',
    individual_vip: 'Individual VIP',
};

const ResultsDisplay = ({ categories }: { categories: PredictionCategoryDoc[] }) => {
    const firestore = useFirestore();
    const { toast } = useToast();
    const [publishingId, setPublishingId] = useState<string | null>(null);

    const handlePublish = async (categoryId: string, currentStatus: 'published' | 'unpublished') => {
        if (!firestore) return;
        
        const newStatus = currentStatus === 'published' ? 'unpublished' : 'published';
        setPublishingId(categoryId);

        try {
            const today = new Date().toISOString().split('T')[0];
            const docRef = doc(firestore, `predictions/${today}/${categoryId}`);
            await updateDoc(docRef, { status: newStatus });
            toast({
                title: 'Status Updated',
                description: `Category ${categoryTitles[categoryId]} has been ${newStatus}.`,
            });
        } catch (error) {
            console.error("Failed to update status: ", error);
            toast({
                title: 'Error',
                description: 'Failed to update publication status.',
                variant: 'destructive',
            });
        } finally {
            setPublishingId(null);
        }
    };
    
    return (
        <Card>
            <CardHeader>
                <CardTitle className="flex items-center gap-2"><FileJson /> Generated Predictions Result</CardTitle>
                <CardDescription>
                    Here is a summary of the predictions generated by the AI agent. Click publish to make them visible to users.
                </CardDescription>
            </CardHeader>
            <CardContent>
                <Accordion type="multiple" defaultValue={categories.map(c => c.id)}>
                    {categories.map(category => (
                         <AccordionItem value={category.id} key={category.id}>
                            <div className="flex items-center w-full">
                                <AccordionTrigger className="text-lg font-semibold hover:no-underline flex-1">
                                    <div className="flex items-center gap-4">
                                        <span>{categoryTitles[category.id]} ({category.predictions.length} matches)</span>
                                        <Badge variant={category.status === 'published' ? 'default' : 'secondary'} className={category.status === 'published' ? 'bg-green-600' : ''}>
                                            {category.status}
                                        </Badge>
                                    </div>
                                </AccordionTrigger>
                                <Button 
                                    size="sm" 
                                    variant="outline" 
                                    className="mr-4"
                                    onClick={() => handlePublish(category.id, category.status)}
                                    disabled={publishingId === category.id}
                                >
                                    {publishingId === category.id ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <UploadCloud className="mr-2 h-4 w-4" />}
                                    {category.status === 'published' ? 'Unpublish' : 'Publish'}
                                </Button>
                            </div>
                            <AccordionContent>
                                <PredictionTable matches={category.predictions || []} />
                            </AccordionContent>
                        </AccordionItem>
                    ))}
                </Accordion>
            </CardContent>
        </Card>
    );
};


export default function OfficialPredictionsPage() {
    const [isGenerating, setIsGenerating] = useState(false);
    const [logs, setLogs] = useState<string[]>([]);
    const { toast } = useToast();
    const firestore = useFirestore();
    const today = new Date().toISOString().split('T')[0];

    const categoriesQuery = firestore ? collection(firestore, `predictions/${today}`) : null;
    const { data: predictionCategories, loading: categoriesLoading } = useCollection<PredictionCategoryDoc>(categoriesQuery);


    const handleGeneratePredictions = async () => {
        setIsGenerating(true);
        setLogs(['üöÄ Starting Football Predictions Generation...']);

        try {
            setLogs(prev => [...prev, '‚è≥ Fetching matches & running AI analysis... This may take a minute.']);
            await generateOfficialPredictions();
            
            setLogs(prev => [...prev, '‚úÖ AI Analysis and validation complete.']);
            setLogs(prev => [...prev, '‚úÖ Predictions saved to Firestore with "unpublished" status.']);
            setLogs(prev => [...prev, 'üéâ Process Finished! You can now publish each category.']);

            toast({
                title: "Process Complete",
                description: "Official predictions have been generated successfully.",
            });

        } catch (error: any) {
            const errorMessage = error.message || "An unknown error occurred during prediction generation.";
            setLogs(prev => [...prev, `‚ùå Error: ${errorMessage}`]);
            toast({
                variant: "destructive",
                title: "Generation Failed",
                description: errorMessage,
            });
        } finally {
            setIsGenerating(false);
        }
    };

    return (
        <div className="space-y-6">
            <Card>
                <CardHeader>
                    <CardTitle>Official Predictions Generator</CardTitle>
                    <CardDescription>Manually trigger the daily football prediction generation process.</CardDescription>
                </CardHeader>
                <CardContent>
                    <p className="text-sm text-muted-foreground">
                        Clicking the button below will start the automated process of fetching matches, analyzing them with AI, and saving them to the database with an "unpublished" status.
                    </p>
                </CardContent>
                <CardFooter>
                    <Button onClick={handleGeneratePredictions} disabled={isGenerating}>
                        {isGenerating ? (
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        ) : (
                            <PlayCircle className="mr-2 h-4 w-4" />
                        )}
                        {isGenerating ? 'Generating...' : 'Generate Today\'s Predictions'}
                    </Button>
                </CardFooter>
            </Card>

            {(logs.length > 0) && (
                <Card>
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2"><Terminal /> Generation Logs</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <div className="bg-muted/50 p-4 rounded-lg max-h-96 overflow-y-auto">
                            <pre className="text-xs whitespace-pre-wrap">
                                {logs.join('\n')}
                            </pre>
                        </div>
                    </CardContent>
                </Card>
            )}

            {categoriesLoading && (
                 <div className="flex justify-center items-center py-12">
                    <Loader2 className="h-8 w-8 animate-spin text-primary" />
                    <p className="ml-4 text-muted-foreground">Loading today's generated predictions...</p>
                </div>
            )}

            {predictionCategories && predictionCategories.length > 0 && (
                 <ResultsDisplay categories={predictionCategories} />
            )}
            
            {!categoriesLoading && predictionCategories && predictionCategories.length === 0 && logs.length === 0 && (
                 <Card className="text-center p-12">
                    <p className="text-muted-foreground">No predictions have been generated for today yet.</p>
                    <p className="text-sm text-muted-foreground">Click the button above to start the process.</p>
                </Card>
            )}
        </div>
    );
}
