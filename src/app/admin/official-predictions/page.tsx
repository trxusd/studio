
'use client';

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Loader2, PlayCircle, Terminal, FileJson, ChevronDown } from "lucide-react";
import { useState } from "react";
import { useToast } from "@/hooks/use-toast";
import { generateOfficialPredictions } from "@/ai/flows/generate-official-predictions";
import type { OfficialPredictionsOutput } from "@/ai/schemas/prediction-schemas";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";

type MatchPrediction = {
    match: string;
    home_team: string;
    away_team: string;
    league: string;
    time: string;
    prediction: string;
    odds: number;
    confidence: number;
};

const PredictionTable = ({ matches }: { matches: MatchPrediction[] }) => {
    if (!matches || matches.length === 0) {
        return <p className="text-sm text-muted-foreground px-4 py-2">No predictions in this category.</p>;
    }
    return (
        <Table>
            <TableHeader>
                <TableRow>
                    <TableHead>Match</TableHead>
                    <TableHead>League</TableHead>
                    <TableHead>Prediction</TableHead>
                    <TableHead className="text-right">Odds</TableHead>
                    <TableHead className="text-right">Confidence</TableHead>
                </TableRow>
            </TableHeader>
            <TableBody>
                {matches.map((p, index) => (
                    <TableRow key={index}>
                        <TableCell className="font-medium">{p.match}</TableCell>
                        <TableCell>{p.league}</TableCell>
                        <TableCell><Badge variant="secondary">{p.prediction}</Badge></TableCell>
                        <TableCell className="text-right">{p.odds.toFixed(2)}</TableCell>
                        <TableCell className="text-right">{p.confidence}%</TableCell>
                    </TableRow>
                ))}
            </TableBody>
        </Table>
    );
};


const ResultsDisplay = ({ results }: { results: OfficialPredictionsOutput }) => {
    const categories = [
        { title: 'Secure Trial', data: results.secure_trial?.coupon_1, type: 'coupon' },
        { title: 'Free Coupon', data: results.free_coupon?.coupon_1, type: 'coupon' },
        { title: 'Free Individual', data: results.free_individual, type: 'list' },
        { title: 'Exclusive VIP Coupon 1', data: results.exclusive_vip?.coupon_1, type: 'coupon' },
        { title: 'Exclusive VIP Coupon 2', data: results.exclusive_vip?.coupon_2, type: 'coupon' },
        { title: 'Exclusive VIP Coupon 3', data: results.exclusive_vip?.coupon_3, type: 'coupon' },
        { title: 'Individual VIP', data: results.individual_vip, type: 'list' },
    ];

    return (
        <Card>
            <CardHeader>
                <CardTitle className="flex items-center gap-2"><FileJson /> Generated Predictions Result</CardTitle>
                <CardDescription>
                    Here is a summary of the predictions generated by the AI agent.
                </CardDescription>
            </CardHeader>
            <CardContent>
                <Accordion type="multiple" defaultValue={categories.map(c => c.title)}>
                    {categories.map(category => (
                         <AccordionItem value={category.title} key={category.title}>
                            <AccordionTrigger className="text-lg font-semibold">
                                {category.title} ({(category.data || []).length} matches)
                            </AccordionTrigger>
                            <AccordionContent>
                                <PredictionTable matches={category.data || []} />
                            </AccordionContent>
                        </AccordionItem>
                    ))}
                </Accordion>
            </CardContent>
        </Card>
    );
};


export default function OfficialPredictionsPage() {
    const [isLoading, setIsLoading] = useState(false);
    const [logs, setLogs] = useState<string[]>([]);
    const [predictionResult, setPredictionResult] = useState<OfficialPredictionsOutput | null>(null);
    const { toast } = useToast();

    const handleGeneratePredictions = async () => {
        setIsLoading(true);
        setLogs(['üöÄ Starting Football Predictions Generation...']);
        setPredictionResult(null);

        try {
            setLogs(prev => [...prev, '‚è≥ Fetching matches & running AI analysis... This may take a minute.']);
            const result = await generateOfficialPredictions();
            
            setLogs(prev => [...prev, '‚úÖ AI Analysis and validation complete.']);
            setLogs(prev => [...prev, '‚úÖ Predictions saved to Firestore.']);
            setLogs(prev => [...prev, 'üéâ Process Finished!']);
            
            setPredictionResult(result);

            toast({
                title: "Process Complete",
                description: "Official predictions have been generated and published successfully.",
            });

        } catch (error: any) {
            const errorMessage = error.message || "An unknown error occurred during prediction generation.";
            console.error(error);
            setLogs(prev => [...prev, `‚ùå Error: ${errorMessage}`]);
            toast({
                variant: "destructive",
                title: "Generation Failed",
                description: errorMessage,
            });
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className="space-y-6">
            <Card>
                <CardHeader>
                    <CardTitle>Official Predictions Generator</CardTitle>
                    <CardDescription>Manually trigger the daily football prediction generation process.</CardDescription>
                </CardHeader>
                <CardContent>
                    <p className="text-sm text-muted-foreground">
                        Clicking the button below will start the automated process of fetching matches, analyzing them with AI, and publishing the 50 official daily predictions to the website and database.
                    </p>
                </CardContent>
                <CardFooter>
                    <Button onClick={handleGeneratePredictions} disabled={isLoading}>
                        {isLoading ? (
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        ) : (
                            <PlayCircle className="mr-2 h-4 w-4" />
                        )}
                        {isLoading ? 'Generating...' : 'Generate Today\'s Predictions'}
                    </Button>
                </CardFooter>
            </Card>

            {(logs.length > 0) && (
                <Card>
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2"><Terminal /> Generation Logs</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <div className="bg-muted/50 p-4 rounded-lg h-64 overflow-y-auto">
                            <pre className="text-xs whitespace-pre-wrap">
                                {logs.join('\n')}
                            </pre>
                        </div>
                    </CardContent>
                </Card>
            )}

            {predictionResult && (
                 <ResultsDisplay results={predictionResult} />
            )}
        </div>
    );
}
